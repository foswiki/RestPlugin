%META:TOPICINFO{author="BaseUserMapping_333" date="1196240328" format="1.1" version="1"}%

---+ Test %SYSTEMWEB%.RestPlugin
This topic contains an example of a %SYSTEMWEB%.RestPlugin =GET= and =PATCH= of a Topic's =_text= using json

Note that _every_ query request response will contain a new validation nonce that can then be used to POST/PATCH/DELETE/PUT

%JQREQUIRE{"Form"}%

<script>
// prepare the form when the DOM is ready 
$(document).ready(function() { 
    console.log('jquery version: '+jQuery().jquery);

    //the GET submit
    $('#queryTestForm').submit(function() {
    
        var query = $('#queryTestForm #query').val();
        var element = $('input:radio[name=element]:checked').val();
        var encoding = $('input:radio[name=encoding]:checked').val();

        // inside event callbacks 'this' is the DOM element so we first 
        // wrap it in a jQuery object and then invoke ajaxSubmit
        var request_it = {
            target:        '#query_output',
            url:           'http://x61/f/bin/query/'+query+'/'+element+'.'+encoding,
            type:           'GET',
            dataType:       encoding,
            //beforeSubmit:  showRequest,  // pre-submit callback 
            success:       showResponseForm,  // post-submit callback 
            beforeSend:     addNonceToHeader

        };
        //clear the textarea
        $('#query_output').text('requesting');
        $(this).ajaxSubmit(request_it); 
 
        // !!! Important !!! 
        // always return false to prevent standard browser submit and page navigation  
        return false; 
    });
    //the PATCH submit
    $('#queryTestForm_SUBMIT').submit(function() {
        
        var query = $('#queryTestForm #query').val();
        var element = $('input:radio[name=element]:checked').val();
        var encoding = $('input:radio[name=encoding]:checked').val();
    
        var newtext = $('#query_output').val();
        
        //console.log('newtext: '+newtext);

        //clear the textarea
        $('#query_output').text('SUBMITTING');
        //$(this).ajaxSubmit(request_it); 
        
        //need to work out what the jQuery.ajax equivalent of
        //curl -X PATCH -H "Content-Type:text/json" -d '{"_text": "curl is it"}' http://x61/f/bin/query/Sandbox/TestTopic0/topic.json

        
        jQuery.ajax({
                    contentType: 'text/json', 
                    data: '{"_text": "'+newtext+'"}', 
                    processData:    false,
                    type: 'PATCH', 
                    url: 'http://x61/f/bin/query/'+query+'/'+element+'.'+encoding, 
                    success:        showResponse,  // post-submit callback 
                    beforeSend:     addNonceToHeader
                    });

        return false;
    });
});
function addNonceToHeader(xhr) {
    //Add strikeone and SessionId to headers too
    xhr.setRequestHeader("Cookie", "IE is shite");
    xhr.setRequestHeader("Cookie", document.cookie);

    //jquery < 1.4.4 needs to use POST and the over-ride cos its busted and sends an empty payload.
    //xhr.setRequestHeader("X-HTTP-METHOD-OVERRIDE", 'PATCH');
    
    var nonce = $('#queryTestForm_SUBMIT #query_nonce').val();
    
    //combine the nonce with the cookie secret that is in the containing html..
    //which means we need to force strikeone.js to be loaded too (see RestPlugin::initPlugin
    
    xhr.setRequestHeader("X-Foswiki-Nonce", StrikeOne.calculateNewKey("?"+nonce));
}
// post-submit callback 
function showResponseForm(responseText, statusText, data1, data2)  { 
    var xhr, form;
    if (data2 == null) {
        //this is pre jquery 1.4
        form = data1;
    } else {
        xhr = data1;
        form = data2;
    }
    
    //$('#queryTestForm_SUBMIT').topicData = topicData;

    if ((typeof responseText) == 'string') {
        $('#query_output').text(responseText);
    } else {
        $('#query_output').text(responseText._text);
    }

    if (xhr != null) {
        var nonce = xhr.getResponseHeader("X-Foswiki-Nonce");
        if ((nonce == null) || (nonce == '')) {
            nonce = 'nonce not found';
        }
        $('#query_nonce').val(nonce);
    } else {
        $('#query_nonce').val('no xhr availible - need jQuery 1.4 and jquery forms 2.43');
    }
}
// post-submit callback for $.ajax
function showResponse(responseText, statusText, xhr)  { 
   
    //$('#queryTestForm_SUBMIT').topicData = topicData;

    if ((typeof responseText) == 'string') {
        $('#query_output').text(responseText);
    } else {
        $('#query_output').text(responseText._raw_text);
    }

    if (xhr != null) {
        var nonce = xhr.getResponseHeader("X-Foswiki-Nonce");
        if ((nonce == null) || (nonce == '')) {
            nonce = 'nonce not found';
        }
        $('#query_nonce').val(nonce);
    } else {
        $('#query_nonce').val('no xhr availible - need jQuery 1.4 and jquery forms 2.43');
    }
}
</script>

http://x61/f/bin/query/Sandbox/TestRestPlugin/topic.json

<form id="queryTestForm">
<input type="text" id="query" name="query" value="Sandbox/TestTopic0" />
%BR%
Element:
<input type="radio" name="element" value="topic" id="topic" checked/><label for="topic">topic</label>
<input type="radio" name="element" value="web" id="web" disabled /><label for="web">web</label>
<input type="radio" name="element" value="attachment" id="attachment"disabled  /><label for="attachment">attachment</label>%BR%
Encoding:
<input type="radio" name="encoding" value="json" id="json" checked/><label for="json">.json</label>
<input type="radio" name="encoding" value="html" id="html" disabled/><label for="html">.html</label>
<input type="radio" name="encoding" value="perl" id="perl" /><label for="perl">.perl</label>
<input type="radio" name="encoding" value="text" id="text" /><label for="text">.text</label>
%BR%
<input type="submit" value="GET topic text">
</form>

<form id="queryTestForm_SUBMIT" type="POST">
<textarea id="query_output" cols="80" rows="10"></textarea>
<input type="text" id="query_nonce" name="query" size="80" />
<input type="submit" value="PATCH topic text">
</form>

